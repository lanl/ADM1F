{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:39.340347Z",
     "start_time": "2020-09-22T23:36:38.535234Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import ph as ph \n",
    "import subprocess\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.stats import norm\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:39.352995Z",
     "start_time": "2020-09-22T23:36:39.344240Z"
    }
   },
   "outputs": [],
   "source": [
    "# Grab the last output file\n",
    "def getlastoutput():\n",
    "    '''\n",
    "    Return the name of last indicator file\n",
    "    '''\n",
    "    filelist = os.listdir(os.getcwd())\n",
    "    filelist = filter(lambda x: not os.path.isdir(x), filelist)\n",
    "    names=[s for s in filelist if 'indicator' in s]\n",
    "    idx_max = max([int(s.split('-')[1].split('.')[0]) for s in names])\n",
    "    lastname = \"indicator-{:03d}.out\".format(idx_max)\n",
    "    return lastname"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Configurations**\n",
    "\n",
    "| Configuration |  Vliq (m$^3$) | t\\_resx (d) | Q (m$^3$/d)|  \n",
    "| ------ | ------ | ------ | ------|\n",
    "Sherri's | 3400 | 0 | 134 |\n",
    "Phase 1 | 340 | 1.5 | 618 |\n",
    "Phase 2 | 3400 | 700 | 618/--- |\n",
    "\n",
    "where t\\_resx = SRT - HRT"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Relation between cation and PH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:39.710595Z",
     "start_time": "2020-09-22T23:36:39.700803Z"
    }
   },
   "outputs": [],
   "source": [
    "cat_test = [i*0.001 for i in range(200)]\n",
    "\n",
    "# Uncomment the following code to get the data\n",
    "# ph_test = [ph.ph(i)[0] for i in cat_test]\n",
    "# np.savetxt('0724data/no-configuration.dat', ph_test, fmt='%5.6f')\n",
    "\n",
    "ph_test = np.loadtxt('0724data/no-configuration.dat')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Relation b/t cation and Ph under Sherri's config**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:39.946071Z",
     "start_time": "2020-09-22T23:36:39.715715Z"
    },
    "code_folding": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Relation b/t cation and Ph under Sherri's config\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.scatter(cat_test, ph_test)\n",
    "plt.ylabel('PH',fontsize=15)\n",
    "plt.xticks(fontsize=15)\n",
    "plt.yticks(fontsize=15)\n",
    "plt.xlabel('Cation (kmole/m3)',fontsize=15)\n",
    "plt.title(\"Sherri's configuration\",fontsize=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Relation b/t cation and Ph under Phase 1 config**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:40.176521Z",
     "start_time": "2020-09-22T23:36:39.950122Z"
    },
    "code_folding": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Uncomment the following code to get the data\n",
    "# os.chdir('../fast_adm')\n",
    "# terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "# ph_test_config1 = [ph.ph(i,**config1)[0] for i in cat_test]\n",
    "# np.savetxt('0724data/configuration1.dat', ph_test_config1, fmt='%5.6f')\n",
    "\n",
    "ph_test_config1 = np.loadtxt('0724data/configuration1.dat')\n",
    "\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.scatter(cat_test, ph_test_config1)\n",
    "plt.ylabel('PH',fontsize=15)\n",
    "plt.xticks(fontsize=15)\n",
    "plt.yticks(fontsize=15)\n",
    "plt.xlabel('Cation (kmole/m3)',fontsize=15)\n",
    "plt.title(\"Phase 1 Configuration with only cation being changed\",fontsize=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Relation b/t cation and Ph under Phase 2 config**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:40.419101Z",
     "start_time": "2020-09-22T23:36:40.181624Z"
    },
    "code_folding": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Uncomment the following code to get the data\n",
    "# os.chdir('../fast_adm')\n",
    "# terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "# ph_test_config2 = [ph.ph(i,**config2)[0] for i in cat_test]\n",
    "# np.savetxt('0724data/configuration2.dat', ph_test_config2, fmt='%5.6f')\n",
    "\n",
    "ph_test_config2 = np.loadtxt('0724data/configuration2.dat')\n",
    "\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.scatter(cat_test, ph_test_config2)\n",
    "plt.xticks(fontsize=15)\n",
    "plt.yticks(fontsize=15)\n",
    "plt.ylabel('PH',fontsize=15)\n",
    "plt.xlabel('Cation (kmole/m3)',fontsize=15)\n",
    "plt.title(\"Phase 2 Configuration 2 with only cation being changed\",fontsize=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## One phase reactor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:40.435650Z",
     "start_time": "2020-09-22T23:36:40.426210Z"
    }
   },
   "outputs": [],
   "source": [
    "#Configuration of one-phase reactor\n",
    "config_default = {'Vliq':3400, 't_resx':0, 'Q':134}\n",
    "config1 = {'Vliq':340, 't_resx':1.5, 'Q':618}\n",
    "config2 = {'Vliq':3400, 't_resx':700, 'Q':618}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:40.794750Z",
     "start_time": "2020-09-22T23:36:40.444051Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 7.12688 if using the original cation value 0\n"
     ]
    }
   ],
   "source": [
    "# Print out the predicted PH if using original inputs, default Vliq and default Q\n",
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "old_ph0 = ph.ph(0)\n",
    "print('Predicted PH is {} if using the original cation value {}'.format(old_ph0[0], old_ph0[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:41.471567Z",
     "start_time": "2020-09-22T23:36:40.850796Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 4.58965 if using the original cation value 0\n"
     ]
    }
   ],
   "source": [
    "# Print out the predicted PH if using original inputs but with configuration of Phase I\n",
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "old_ph1 = ph.ph(0, **config1)      \n",
    "print('Predicted PH is {} if using the original cation value {}'.format(old_ph1[0], old_ph1[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:42.401959Z",
     "start_time": "2020-09-22T23:36:41.478609Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 7.15189 if using the original cation value 0\n"
     ]
    }
   ],
   "source": [
    "# Print out the predicted PH if using original inputs but with configuration of Phase II\n",
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "old_ph2 = ph.ph(0, **config2)      \n",
    "print('Predicted PH is {} if using the original cation value {}'.format(old_ph2[0], old_ph2[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Set Target**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:42.450916Z",
     "start_time": "2020-09-22T23:36:42.412260Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "class target:\n",
    "    def __init__(self,ph,sig):\n",
    "        self.ph = ph\n",
    "        self.sig = sig\n",
    "    def pdf(self,x):\n",
    "        return norm.pdf(x,self.ph,self.sig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:42.486277Z",
     "start_time": "2020-09-22T23:36:42.456042Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "# Give the necessary information\n",
    "# target_ph = 6.5       # target_ph: target PH value, target_sig: allow some variations around target PH\n",
    "target_sig = 0.01     # The smaller this value is, the more accurate we will get in the end\n",
    "sample_size = 100\n",
    "\n",
    "infl_path = '../fast_adm/influent.dat'\n",
    "params_path = '../fast_adm/params.dat'\n",
    "ic_path = '../fast_adm/ic.dat'\n",
    "\n",
    "## Use data consistent inversion method to return the needed cation to get the target PH\n",
    "init_sample = np.random.uniform(0,0.2,sample_size)   #the more samples we generate, the more accurate we will get in the end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:36:42.522773Z",
     "start_time": "2020-09-22T23:36:42.493328Z"
    }
   },
   "outputs": [],
   "source": [
    "target72 = target(7.2,target_sig)\n",
    "target73 = target(7.3,target_sig)\n",
    "target75 = target(7.5,target_sig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Target 1: target_ph=7.2 with Sherri's configuration**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:37:09.474431Z",
     "start_time": "2020-09-22T23:36:42.533768Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 7.12688\n",
      "The amount of cation in the reactor should be: 0.009501082569507303 kmole/m3\n"
     ]
    }
   ],
   "source": [
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "## ph.ph_control accepts target, initial sample, number of cation values and file path of each input file\n",
    "## ph.ph_control return the needed cation to get the target PH\n",
    "cat_tar72_dc = ph.ph_control(target72,init_sample,1,infl_path,params_path,ic_path, **config_default)\n",
    "\n",
    "# Print out the Needed Cation value!!\n",
    "print('The amount of cation in the reactor should be:', cat_tar72_dc[0], 'kmole/m3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:37:09.949150Z",
     "start_time": "2020-09-22T23:37:09.479170Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(7.18587, 0.009501082569507303)]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[ph.ph(i, **config_default) for i in cat_tar72_dc]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Target 2: target_ph=7.2 with configuration 1**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:37:32.988294Z",
     "start_time": "2020-09-22T23:37:09.957914Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 4.58965\n",
      "The amount of cation in the reactor should be: 0.06819985431409399 kmole/m3\n"
     ]
    }
   ],
   "source": [
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "## ph.ph_control accepts target, initial sample, number of cation values and file path of each input file\n",
    "## ph.ph_control return the needed cation to get the target PH\n",
    "cat_tar72_c1 = ph.ph_control(target72,init_sample,1,infl_path,params_path,ic_path, **config1)\n",
    "\n",
    "# Print out the Needed Cation value!!\n",
    "print('The amount of cation in the reactor should be:', cat_tar72_c1[0], 'kmole/m3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:37:33.157947Z",
     "start_time": "2020-09-22T23:37:32.996384Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(7.53826, 0.06819985431409399)]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[ph.ph(i, **config1) for i in cat_tar72_c1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Target 3: target_ph=7.2 with configuration 2**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:38:59.509171Z",
     "start_time": "2020-09-22T23:37:33.164579Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 7.15189\n",
      "The amount of cation in the reactor should be: 0.007868341311887206 kmole/m3\n"
     ]
    }
   ],
   "source": [
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "## ph.ph_control accepts target, initial sample, number of cation values and file path of each input file\n",
    "## ph.ph_control return the needed cation to get the target PH\n",
    "cat_tar72_c2 = ph.ph_control(target72,init_sample,1,infl_path,params_path,ic_path, **config2)\n",
    "\n",
    "# Print out the Needed Cation value!!\n",
    "print('The amount of cation in the reactor should be:', cat_tar72_c2[0], 'kmole/m3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:00.378552Z",
     "start_time": "2020-09-22T23:38:59.515789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(7.19638, 0.007868341311887206)]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[ph.ph(i, **config2) for i in cat_tar72_c2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Two phase reactor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PH control for both phase 1 and phase 2**\n",
    "\n",
    "reactor_cat(target_1=target1, target_2=target2, Q1=1, Vliq1=1, t_resx1=1, Q2=1, Vliq2=1, t_res2=1)\n",
    "\n",
    "**PH control for just phase 1 in two-phase reactor**\n",
    "\n",
    "reactor_cat(target_1=target1, Q1=1, Vliq1=1, t_resx1=1, Q2=1, Vliq2=1, t_res2=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:00.397914Z",
     "start_time": "2020-09-22T23:39:00.387116Z"
    }
   },
   "outputs": [],
   "source": [
    "## Configuration of two-phase reacotr\n",
    "# config12 = {\"Vliq1\":340, \"Vliq2\":3400, \"t_resx1\":1.5, \"t_resx2\":700, \"Q1\":618, \"Q2\":618}\n",
    "config12 = {\"Vliq1\":340, \"Vliq2\":3400, \"t_resx1\":1.5, \"t_resx2\":700, \"Q1\":618}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:00.423624Z",
     "start_time": "2020-09-22T23:39:00.409461Z"
    }
   },
   "outputs": [],
   "source": [
    "def afun(Q0,eff,**kwargs):\n",
    "    '''\n",
    "    eff: membrane efficiency\n",
    "    '''\n",
    "    V = 3400\n",
    "    t_resx = 0\n",
    "    if 'V' in kwargs.keys():\n",
    "        V = kwargs['V']\n",
    "    if 't_resx' in kwargs.keys():\n",
    "        t_resx = kwargs['t_resx']\n",
    "    nu = Q0*(1-eff)\n",
    "    de = V/(V/Q0+t_resx) - eff*Q0\n",
    "    return nu/de-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:00.446927Z",
     "start_time": "2020-09-22T23:39:00.440334Z"
    }
   },
   "outputs": [],
   "source": [
    "X_idx = [i for i in range(12,24)]\n",
    "S_idx = [i for i in range(26) if i not in X_idx]  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:00.496526Z",
     "start_time": "2020-09-22T23:39:00.457949Z"
    },
    "code_folding": [
     0
    ]
   },
   "outputs": [],
   "source": [
    "def reactor_cat(**kwargs):\n",
    "    '''\n",
    "    Two phase reactor, we will update the cation values for phase 1 and 2 to control PH.\n",
    "    Q, Vliq and t_resx for phase 1 and 2 can be set to certain values\n",
    "    Will create output file storing the phase 1 result and phase 2 result\n",
    "    (Only need to put values in the function when it is not using the default)\n",
    "    target_1: target for phase 1\n",
    "    target_2: target for phase 2\n",
    "    Vliq1: Vliq of phase 1\n",
    "    Vliq2: Vliq of phase 2\n",
    "    t_resx1: t_resx of phase 1\n",
    "    t_resx2: t_resx of phase 2\n",
    "    Q1: flow rate of phase 1\n",
    "    Q2: flow rate of phase 2\n",
    "    '''\n",
    "    ################## Phase I ##################\n",
    "    os.chdir('../fast_adm')\n",
    "    command1, command2 = './adm1 -steady', './adm1 -steady'\n",
    "    arg1, arg2 = {}, {}\n",
    "    if 'Q1' in kwargs.keys():\n",
    "        arg1[\"Q\"] = kwargs['Q1']\n",
    "    if 'Vliq1' in kwargs.keys():\n",
    "        arg1[\"Vliq\"] = kwargs[\"Vliq1\"]\n",
    "        command1 = command1 + ' -Vliq '+str(kwargs['Vliq1'])\n",
    "    if 't_resx1' in kwargs.keys():\n",
    "        arg1[\"t_resx\"] = kwargs[\"t_resx1\"]\n",
    "        command1 = command1 + ' -t_resx '+str(kwargs['t_resx1']) \n",
    "    if 'target_1' in kwargs.keys():\n",
    "        cat_val1 = ph.ph_control(kwargs['target_1'],init_sample,1,infl_path,params_path,ic_path,**arg1)[0]\n",
    "        os.chdir('../fast_adm')\n",
    "        data=np.loadtxt('influent.dat')\n",
    "        data[24] = cat_val1 \n",
    "        np.savetxt('influent.dat', data, fmt='%5.6f')\n",
    "        subprocess.call(command1, shell=True)   \n",
    "        phase1_out2 = np.loadtxt(getlastoutput(),skiprows=2, unpack=True)\n",
    "        print('Phase 1, after changing cation to {:.6f} kmole/m3, new PH = {}'.format(cat_val1, phase1_out2[26]))\n",
    "    else:\n",
    "        subprocess.call(command1, shell=True)\n",
    "        phase1_out2 = np.loadtxt(getlastoutput(),skiprows=2, unpack=True)\n",
    "        print('Phase 1, without changing cation, predicted PH = {}'.format(phase1_out2[26]))\n",
    "    subprocess.call('rm *.out', shell=True)  \n",
    "    ################## Phase II ##################\n",
    "    data=np.loadtxt('influent.dat')\n",
    "    ## Soluable component\n",
    "    for j in S_idx:\n",
    "        if j == 9:  \n",
    "            data[j] = phase1_out2[j]/12000  # unit of C\n",
    "        elif j == 10:\n",
    "            data[j] = phase1_out2[j]/14000  # unit of N\n",
    "        else:\n",
    "            data[j] = phase1_out2[j]/1000   # /1000 because of the unit\n",
    "    ## Particulate component\n",
    "    for j in X_idx:\n",
    "        data[j] = 0.17*phase1_out2[j]/1000   #0.17 is the membrane efficiency\n",
    "    ## Q: flow rate\n",
    "    arga = {}\n",
    "    if 'Vliq1' in kwargs.keys():\n",
    "        arga['V'] = kwargs['Vliq1']\n",
    "    if 't_resx1' in kwargs.keys():\n",
    "        arga['t_resx'] = kwargs['t_resx1']\n",
    "    a = afun(data[26],0.17,**arga)\n",
    "    data[26] = a*data[26]/(1+a)\n",
    "    ##--\n",
    "    np.savetxt('influent.dat', data, fmt='%5.6f')\n",
    "    if 'Q2' in kwargs.keys():\n",
    "        arg2[\"Q\"] = kwargs['Q2']\n",
    "    if 'Vliq2' in kwargs.keys():\n",
    "        arg2[\"Vliq\"] = kwargs[\"Vliq2\"]\n",
    "        command2 = command2 + ' -Vliq '+str(kwargs['Vliq2'])\n",
    "    if 't_resx2' in kwargs.keys():\n",
    "        arg2[\"t_resx\"] = kwargs[\"t_resx2\"]\n",
    "        command2 = command2 + ' -t_resx '+str(kwargs['t_resx2']) \n",
    "    if 'target_2' in kwargs.keys():\n",
    "        cat_val2 = ph.ph_control(kwargs[\"target_2\"],init_sample,1,infl_path,params_path,ic_path,**arg2)[0]   #[0] is to convert one-item list to a float\n",
    "        if isinstance(cat_val2, float):  #this means cation needs to be adjusted\n",
    "            os.chdir('../fast_adm')\n",
    "            data=np.loadtxt('influent.dat')\n",
    "            data[24] = cat_val2\n",
    "            np.savetxt('influent.dat', data, fmt='%5.6f')\n",
    "            subprocess.call(command2, shell=True)\n",
    "            phase2_out = np.loadtxt(getlastoutput(),skiprows=2, unpack=True)\n",
    "            print('Phase 2, after changing cation to {:.6f} kmole/m3, new PH = {}'.format(cat_val2, phase2_out[26]))\n",
    "    else:\n",
    "        subprocess.call(command2, shell=True)\n",
    "        phase2_out = np.loadtxt(getlastoutput(),skiprows=2, unpack=True)\n",
    "        print('Phase 2, without changing cation, predicted PH = {}'.format(phase2_out[26]))\n",
    "    subprocess.call('rm *.out', shell=True)    \n",
    "    os.chdir('../Presentation') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**target_ph1=7.5, target_ph2=7.2 with default configuration12**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:23.886293Z",
     "start_time": "2020-09-22T23:39:00.504615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 4.58965\n",
      "Phase 1, after changing cation to 0.068200 kmole/m3, new PH = 7.53826\n",
      "Predicted PH is 7.55274\n"
     ]
    }
   ],
   "source": [
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "reactor_cat(target_1=target75,target_2=target72,**config12)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**target_ph1=7.5, target_ph2=None with default configuration12**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-22T23:39:47.882761Z",
     "start_time": "2020-09-22T23:39:23.891447Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted PH is 4.58965\n",
      "Phase 1, after changing cation to 0.068200 kmole/m3, new PH = 7.53826\n",
      "Phase 2, without changing cation, predicted PH = 7.55274\n"
     ]
    }
   ],
   "source": [
    "os.chdir('../fast_adm')\n",
    "terminal1 = subprocess.call('git checkout influent.dat', shell=True)\n",
    "\n",
    "reactor_cat(target_1=target75,**config12)    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "217px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
